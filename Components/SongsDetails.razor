@using Music.Lyrics.Word.Counter.Services
@using Music.Lyrics.Word.Counter.Models
@inject ISongHandler songHandler
@inject ILyricsHandler lyricsHandler

@if (Songs == null)
{
    <div class="alert alert-info">Loading @Artist.Name Songs....</div>
}
else if(IsSongsLoaded)
{
    <div class="alert alert-info">Number of Songs found: @Songs.Count</div>
    <div class="alert alert-success">
        Lyrics Average: @lyricsHandler.GetLyricsAverage(Songs)
    </div>
} 
else 
{
    <div class="alert alert-danger">Failed to load @Artist.Name songs.</div>
}

@code {
    [Parameter]
    public Artist Artist { get; set; }
    private List<Song> Songs { get; set; }
    private bool IsSongsLoaded => Songs?.Count != 0;

    protected override async Task OnInitializedAsync()
    {
        Songs = await songHandler.GetSongsAsync(Artist);
    }
}